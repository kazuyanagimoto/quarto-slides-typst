{
  "hash": "7203b9ecc2f2b99a93fc13183612a901",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Quarto Clean Theme\nsubtitle: A Minimalistic Theme for Quarto + Typst + Touying\ndate: today\ndate-format: long\nimage: thumbnail.svg\nauthor:\n  - name: Kazuharu Yanagimoto\n    orcid: 0009-0007-1967-8304\n    email: kazuharu.yanagimoto@cemfi.edu.es\n    affiliations: CEMFI\nformat:\n  clean-typst:\n    bibliographystyle: \"chicago-author-date\"\n    font-paths: [\"static/fonts\"]\n    include-in-header: \"custom.typ\"\n    commands: [small-cite]\nexecute: \n  echo: false\n  warning: false\nbibliography: [references.bib]\n---\n\n\n# Section Slide as Header Level 1\n\n## Slide Title as Header Level 2\n\n### Subtitle as Header Level 3\n\nYou can put any content here, including text, images, tables, code blocks, etc.\n\n- first unorder list item\n    - A sub item\n\n1. first ordered list item\n    1. A sub item\n\nNext, we'll brief review some theme-specific components.\n\n- Note that _all_ of the standard Quarto + Typst\n[features](https://quarto.org/docs/output-formats/typst.html) \ncan be used with this theme\n- Also, all the [Touying](https://touying-typ.github.io) features can be used by **Typst native code**\n\n## Before You Go...\n\nThe [clean theme](https://github.com/kazuyanagimoto/quarto-clean-typst) does not depend on any languages.\nYou can use it with any language supported by Quarto, including R, Python, Julia.\n\nFor this demo, I use R code to show the figures and tables usage in the slides.\n\n\n\n{{< v 0.5em >}}\n\n\n\n\n::: {.callout-warning}\n\n## Required Software (this demo only)\n\nR Packages:\n\n```{.r}\ninstall.packages(c(\"palmerpenguins\", \"modelsummary\", \"tinytable\", \"dplyr\", \"ggplot2\"))\n```\n\n:::\n\n# Components\n\n## Components\n\n### Ordered & Unordered Lists\n\nHere we have an unordered list.\n\n- first item\n    - sub-item\n- second item\n\nAnd next we have an ordered one.\n\n1. first item\n    1. sub-item\n1. second item\n\n## Components\n\n### Alerts & Cross-refs {#sec-crossref}\n\n\nSpecial classes for emphasis\n\n- `.alert` class for default emphasis, e.g. [the second accent color]{.alert}.\n- `.fg` class for custom color, e.g. [with `options='fill: rgb(\"#5D639E\")'`]{.fg options='fill: rgb(\"#5D639E\")'}.\n- `.bg` class for custom background, e.g. [with the default color]{.bg}.\n\nTo cross-reference, you have several options, for example:\n\n- Beamer-like .button class provided by this theme, e.g. [[Appendix]{.button}](#sec-appendix)\n- Sections are not numbered in Touying, you cannot use `@sec-` cross-references\n\n## Components\n\n### Citations\n\nCitations follow the standard\n[Quarto format](https://quarto.org/docs/authoring/footnotes-and-citations.html#citations)\nand be sourced from BibLaTeX, BibTeX, or CLS files. For example:\n\n- [Topic 1:]{.alert} Review of DID [@arkhangelsky2024]\n\n- [Topic 2:]{.alert} @goodman-bacon2021\n\n### Small Citations\n\nIn many cases, you may want to use small citations, like\n\n- [Staggered DID]{.alert} [[@callaway2021;@sun2021;@borusyak2024]]{.small-cite}\n\nThis `.small-cite` class is defined as a custom style [[custom styling]{.button}](#sec-custom-styling)\n\n## Components\n\n### Blocks\n\nQuarto provides\n[dedicated environments](https://quarto.org/docs/authoring/cross-references.html#theorems-and-proofs)\nfor theorems, lemmas, and so forth. \n\nBut in presentation format, it's arguably more effective just to use a\n[Callout Block](https://quarto.org/docs/authoring/callouts.html).\n\n:::{.callout-note}\n\n## Regression Specification\n\nThe main specification is as follows:\n\n$$\ny_{it} = X_{it} \\beta + \\mu_i + \\varepsilon_{it}\n$$\n\n:::\n\n\n## Ad-hoc Styling\n\n### Typst CSS\n\n- Quarto supports [Typst CSS](https://quarto.org/docs/advanced/typst/typst-css.html) for simple styling\n- You can change [colors]{style=\"color: #009F8C\"}, [backgrounds]{style=\"background-color: #F0F0F0\"}, and [opacity]{style=\"opacity: 0.5\"} for `span` elements\n\n::: {style=\"font-size: 30pt; font-family: 'Times New Roman'\"}\n\nYou can also change the font size and family for `div` elements.\n\n:::\n\n\n\n{{< v 1em >}}\n\n\n\n\n### Vertical Spacing\n\n- A helper shortcode `{{{< v DIST >}}}` is provided to add vertical spacing\n- This is converted to a Typst code `#v(DIST)` internally.\n\n\n\n{{< v 2em >}}\n\n\n\n\nThis is a `2em` vertical spaced from above.\n\n## Custom Styling {#sec-custom-styling}\n\nAs [latex-environment](https://github.com/quarto-ext/latex-environment) quarto extenstion, you can define custom `div` and `span` elements.\n\n```yaml\nformat:\n  clean-typst:\n    include-in-header: \"custom.typ\"\n    commands: [foo]\n```\n\n- You can define custom `div` and `span` elements as Typst functions in `custom.typ` \n  - `environments` in YAML is for block elements `:::{.foo}\\nbody\\n:::`\n  - `commands` in YAML is for inline elements `[]{.foo}`\n- `[text]{.foo options=\"opts\"}` is converted to `#foo(opts)[text]` internally\n- If you want to use `self` as an argument, you can use `touying-fn-wrapper()`\n\n\n\n\n\n## YAML Settings\n\n### Fonts\n\n```yaml\nformat:\n  clean-typst:\n    font-size: 20pt\n    font-heading: Josefin Sans\n    font-body: Montserrat\n    font-weight-heading: bold\n    font-weight-body: normal\n    font-size-title: 2.5em\n    font-size-subtitle: 1.5em\n```\n\n- `font-size` is the default font size for the slide. Other font sizes are relative to this\n- `font-heading` and `font-body` are the font families for headings and body text\n- Since the title slide is important, size of the title `font-size-title` and `font-size-subtitle` can be set separately\n\n## YAML Settings\n\n### Colors\n\n```yaml\nformat:\n  clean-typst:\n    color-jet: \"#272822\"\n    color-accent: \"$accent$\"\n    color-accent2: \"$accent2$\"\n```\n\n- `color-jet` is the main color for text. `#000000` is too dark, and the default is `#131516`\n- `color-accent` is used for the subtitle of the slide, buttons, lists, and the link colors\n- `color-accent2` is used for the alert colors\n\n# Animations\n\n## Simple Animations {#sec-simple-animation}\n\nTouying's [simple animations](https://touying-typ.github.io/docs/dynamic/simple) is available as `{{{< pause >}}}` and `{{{< meanwhile >}}}`\n\n\n\n{{< pause >}}\n\n\n\n\n**Animations in Lists**\n\nSimple animations can be used in lists\n\n- First {{< pause >}}\n- Second\n\n\n## Complex Animations {#sec-complex-animation}\n\n:::: {.complex-anim repeat=4}\n\nTouying's [complex animations](https://touying-typ.github.io/docs/dynamic/complex) is available as `{.complex-anim repeat=4}` environment.\n\n\nAt subslide `#self.subslide`{=typst}, we can\n\nuse [`{.uncover}` environment]{.uncover options='\"2-\"'} for reserving space,\n\nuse [`{.only}` environment]{.only options='\"2-\"'} for not reserving space,\n\n\n\n```{=typst}\n#alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. But only works in a native Typst code. \\\n```\n\n\n\n::: {.only options='4'}\n\n### Other Features\n\n- All the animation functions can be used in Typst Math code [[Appendix]{.button}](#sec-math-animations)\n- `handout: true` in YAML header is available for handout mode (without animations)\n\n:::\n\n::::\n\n\n# Figures & Tables\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Figures\n\n![](img/hokusai_kanagawa.jpg){width=\"50%\" fig-align=\"center\"}\n\n## Figures\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](clean_files/figure-typst/unnamed-chunk-3-1.svg){fig-align='center'}\n:::\n:::\n\n\n\nThis is a `facet_wrap` example with `penguins` dataset.\n\n## Figures\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](clean_files/figure-typst/unnamed-chunk-4-1.svg){fig-align='center'}\n:::\n\n::: {.cell-output-display}\n![](clean_files/figure-typst/unnamed-chunk-4-2.svg){fig-align='center'}\n:::\n:::\n\n\n\nThis is an example of `layout-ncol: 2` for two figures.\n\n## Tables\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n:::: {.complex-anim repeat=3}\n\n::: {.only options='1'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n#figure( // start figure preamble\n  \n  kind: \"tinytable\",\n  supplement: \"Table\", // end figure preamble\n\nblock[ // start block\n\n#let nhead = 2;\n#let nrow = 3;\n#let ncol = 9;\n\n  #let style-array = ( \n    // tinytable cell style after\n(pairs: ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4),), ),\n  )\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, left, left, left, left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 {\n      it \n    } else {\n      let tmp = it\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)\n        if m != none {\n          if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n          if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n          if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n          if (\"underline\" in style) { tmp = underline(tmp) }\n          if (\"italic\" in style) { tmp = emph(tmp) }\n          if (\"bold\" in style) { tmp = strong(tmp) }\n          if (\"mono\" in style) { tmp = math.mono(tmp) }\n          if (\"strikeout\" in style) { tmp = strike(tmp) }\n        }\n      }\n      tmp\n    }\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    column-gutter: 5pt,\n    columns: (auto, auto, auto, auto, auto, auto, auto, auto, auto),\n    stroke: none,\n    align: (x, y) => {\n      let align-array = ( \n        // tinytable cell align after\n      )\n      if align-array.len() == 0 {\n        left\n      } else {\n        left\n        // for style in style-array {\n        //   let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)\n        //   if m != none and (\"align\" in style) {\n        //     let a = style.align\n        //   }\n        // }\n      }\n    },\n    fill: (x, y) => {\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)\n        if m != none and (\"background\" in style) {\n          style.background\n        }\n      }\n    },\n table.hline(y: 2, start: 0, end: 9, stroke: 0.05em + black),\n table.hline(y: 5, start: 0, end: 9, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 9, stroke: 0.1em + black),\n    // tinytable lines before\n\n    table.header(\n      repeat: true,\n[ ],table.cell(stroke: (bottom: .05em + black), colspan: 4, align: center)[Male],table.cell(stroke: (bottom: .05em + black), colspan: 4, align: center)[Female],\n[], [Bill Length (mm)], [Bill Depth (mm)], [Flipper Length (mm)], [Body Mass (g)], [Bill Length (mm)], [Bill Depth (mm)], [Flipper Length (mm)], [Body Mass (g)],\n    ),\n\n    // tinytable cell content after\n[Adelie   ], [40.39], [19.07], [192.4], [4043], [37.26], [17.62], [187.8], [3369],\n[Gentoo   ], [49.47], [15.72], [221.5], [5485], [45.56], [14.24], [212.7], [4680],\n[Chinstrap], [51.09], [19.25], [199.9], [3939], [46.57], [17.59], [191.7], [3527],\n\n    // tinytable footer after\n\n  ) // end table\n\n  ]) // end align\n\n] // end block\n) // end figure\n```\n\n:::\n:::\n\n\n\n:::\n\n::: {.only options='\"2-\"'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n#figure( // start figure preamble\n  \n  kind: \"tinytable\",\n  supplement: \"Table\", // end figure preamble\n\nblock[ // start block\n\n#let nhead = 2;\n#let nrow = 3;\n#let ncol = 9;\n\n  #let style-array = ( \n    // tinytable cell style after\n(pairs: ((0, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3),), bold: true, color: white, background: rgb(\"#107895\"),),\n(pairs: ((0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (1, 1), (1, 2), (1, 4), (2, 0), (2, 1), (2, 2), (2, 4), (3, 0), (3, 1), (3, 2), (3, 4), (4, 0), (4, 1), (4, 2), (4, 4), (5, 0), (5, 1), (5, 2), (5, 4), (6, 0), (6, 1), (6, 2), (6, 4), (7, 0), (7, 1), (7, 2), (7, 4), (8, 0), (8, 1), (8, 2), (8, 4),), ),\n  )\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, left, left, left, left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 {\n      it \n    } else {\n      let tmp = it\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)\n        if m != none {\n          if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n          if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n          if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n          if (\"underline\" in style) { tmp = underline(tmp) }\n          if (\"italic\" in style) { tmp = emph(tmp) }\n          if (\"bold\" in style) { tmp = strong(tmp) }\n          if (\"mono\" in style) { tmp = math.mono(tmp) }\n          if (\"strikeout\" in style) { tmp = strike(tmp) }\n        }\n      }\n      tmp\n    }\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    columns: (auto, auto, auto, auto, auto, auto, auto, auto, auto),\n    stroke: none,\n    align: (x, y) => {\n      let align-array = ( \n        // tinytable cell align after\n      )\n      if align-array.len() == 0 {\n        left\n      } else {\n        left\n        // for style in style-array {\n        //   let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)\n        //   if m != none and (\"align\" in style) {\n        //     let a = style.align\n        //   }\n        // }\n      }\n    },\n    fill: (x, y) => {\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)\n        if m != none and (\"background\" in style) {\n          style.background\n        }\n      }\n    },\n table.hline(y: 2, start: 0, end: 9, stroke: 0.05em + black),\n table.hline(y: 5, start: 0, end: 9, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 9, stroke: 0.1em + black),\n    // tinytable lines before\n\n    table.header(\n      repeat: true,\n[ ],table.cell(stroke: (bottom: .05em + black), colspan: 4, align: center)[Male],table.cell(stroke: (bottom: .05em + black), colspan: 4, align: center)[Female],\n[], [Bill Length (mm)], [Bill Depth (mm)], [Flipper Length (mm)], [Body Mass (g)], [Bill Length (mm)], [Bill Depth (mm)], [Flipper Length (mm)], [Body Mass (g)],\n    ),\n\n    // tinytable cell content after\n[Adelie   ], [40.39], [19.07], [192.4], [4043], [37.26], [17.62], [187.8], [3369],\n[Gentoo   ], [49.47], [15.72], [221.5], [5485], [45.56], [14.24], [212.7], [4680],\n[Chinstrap], [51.09], [19.25], [199.9], [3939], [46.57], [17.59], [191.7], [3527],\n\n    // tinytable footer after\n\n  ) // end table\n\n  ]) // end align\n\n] // end block\n) // end figure\n```\n\n:::\n:::\n\n\n\n:::\n\n- You can easily create Typst tables by [`tinytable`](https://vincentarelbundock.github.io/tinytable/) {{< pause >}}\n- You can [highlight]{.alert} by `tinytable::style_tt()`! {{< pause >}}\n- Read the [GitHub Issue](https://github.com/vincentarelbundock/tinytable/issues/337) and see `theme_slides()` for the table without captions\n\n::::\n\n## Regression Table\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n#figure( // start figure preamble\n  \n  kind: \"tinytable\",\n  supplement: \"Table\", // end figure preamble\n\nblock[ // start block\n\n#let nhead = 2;\n#let nrow = 9;\n#let ncol = 7;\n\n  #let style-array = ( \n    // tinytable cell style after\n(pairs: ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),), align: left,),\n(pairs: ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10),), align: center,),\n  )\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, left, left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 {\n      it \n    } else {\n      let tmp = it\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)\n        if m != none {\n          if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n          if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n          if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n          if (\"underline\" in style) { tmp = underline(tmp) }\n          if (\"italic\" in style) { tmp = emph(tmp) }\n          if (\"bold\" in style) { tmp = strong(tmp) }\n          if (\"mono\" in style) { tmp = math.mono(tmp) }\n          if (\"strikeout\" in style) { tmp = strike(tmp) }\n        }\n      }\n      tmp\n    }\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    column-gutter: 5pt,\n    columns: (auto, auto, auto, auto, auto, auto, auto),\n    stroke: none,\n    align: (x, y) => {\n      let align-array = ( \n        // tinytable cell align after\n      )\n      if align-array.len() == 0 {\n        left\n      } else {\n        left\n        // for style in style-array {\n        //   let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)\n        //   if m != none and (\"align\" in style) {\n        //     let a = style.align\n        //   }\n        // }\n      }\n    },\n    fill: (x, y) => {\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)\n        if m != none and (\"background\" in style) {\n          style.background\n        }\n      }\n    },\n table.hline(y: 2, start: 0, end: 7, stroke: 0.05em + black),\n table.hline(y: 10, start: 0, end: 7, stroke: 0.05em + black),\n table.hline(y: 11, start: 0, end: 7, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 7, stroke: 0.1em + black),\n    // tinytable lines before\n\n    table.header(\n      repeat: true,\n[ ],table.cell(stroke: (bottom: .05em + black), colspan: 3, align: center)[Bill Length (mm)],table.cell(stroke: (bottom: .05em + black), colspan: 3, align: center)[Body Mass (g)],\n[ ], [(1)], [(2)], [(3)], [(4)], [(5)], [(6)],\n    ),\n\n    // tinytable cell content after\n[Chinstrap   ], [10.042\\*\\*], [10.010\\*\\*], [10.037\\*\\*], [32.426        ], [26.924        ], [27.229        ],\n[            ], [(0.432)     ], [(0.341)     ], [(0.340)     ], [(67.512)      ], [(46.483)      ], [(46.587)      ],\n[Gentoo      ], [8.713\\*\\* ], [8.698\\*\\* ], [8.693\\*\\* ], [1375.354\\*\\*], [1377.858\\*\\*], [1377.813\\*\\*],\n[            ], [(0.360)     ], [(0.287)     ], [(0.286)     ], [(56.148)      ], [(39.104)      ], [(39.163)      ],\n[Male        ], [            ], [3.694\\*\\* ], [3.694\\*\\* ], [              ], [667.555\\*\\* ], [667.560\\*\\* ],\n[            ], [            ], [(0.255)     ], [(0.254)     ], [              ], [(34.704)      ], [(34.755)      ],\n[Year        ], [            ], [            ], [0.324\\*    ], [              ], [              ], [3.629         ],\n[            ], [            ], [            ], [(0.156)     ], [              ], [              ], [(21.428)      ],\n[Observations], [342         ], [333         ], [333         ], [342           ], [333           ], [333           ],\n\n    // tinytable footer after\n\n    table.footer(\n      repeat: false,\n      // tinytable notes after\n    table.cell(align: left, colspan: 7, [\\+ p \\< 0.1, \\* p \\< 0.05, \\*\\* p \\< 0.01]),\n    ),\n    \n\n  ) // end table\n\n  ]) // end align\n\n] // end block\n) // end figure\n```\n\n:::\n:::\n\n\n\n\n[modelsummary](https://modelsummary.com) is a super useful for regression tables (`tinytable` is used internally)\n\n\n## Last Words {#sec-last}\n\n### Installation\n\n```{.bash}\nquarto install extension kazuyanagimoto/quarto-clean-typst\n```\n\n### Limitations\n\n- Multiple columns are not supported\n  - You can use [page columnization](https://touying-typ.github.io/docs/layout#page-columnization) of Touying [[Appendix]{.button}](#sec-multicolumns)\n  - Not perfect, but a workaround\n- Background colors and images are not supported\n\n\n### Appendix\n\n- You can use `{{{< appendix >}}}` to start an appendix section. Slide numbering will be freezed. (Next Slides)\n\n\n\n{{< appendix >}}\n\n\n\n\n# Appendix {#sec-appendix}\n\n\n\n## Touying Math Animations {#sec-math-animations}\n\n```{.typst}\nTouying equation with pause:\n$\n  f(x) &= pause x^2 + 2x + 1  \\\n       &= pause (x + 1)^2  \\\n$\nTouying equation is very simple.\n```\n\nTouying equation with pause:\n\n\n\n```{=typst}\n$\n  f(x) &= pause x^2 + 2x + 1  \\\n       &= pause (x + 1)^2  \\\n$\n```\n\n{{< meanwhile >}}\n\n\n\n\nTouying equation is very simple.\n\n\n\n[[Back to main]{.button}](#sec-complex-animation)\n\n## Multiple Columns {#sec-multicolumns}\n\n\n\n```{=typst}\n#slide[\n```\n\n\n\n[Column 1]{.alert}\n\nHere is a long sentence that will wrap onto the next line as it hits the column\nwidth, and continue this way until it stops.\n\n[[Back to main]{.button}](#sec-last)\n\n\n\n```{=typst}\n][\n```\n\n\n\n[Column 2]{.alert}\n\nSome other text in another column.\n\nA second paragraph.\n\n\n\n```{=typst}\n]\n```\n\n\n\n## References\n\n::: {#refs}\n:::\n",
    "supporting": [
      "clean_files/figure-typst"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}